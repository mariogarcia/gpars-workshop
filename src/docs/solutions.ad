[appendix]
:numbered!:
== Exercises solutions
=== Solution 3.4

[source, groovy]
.Solution DSL
----
import static groovyx.gpars.actor.Actors.actor

def printer = actor {
    loop {
        react { List<Integer> numbers -> 
           println numbers.sum() 
        }     
    }    
}

printer << (1..4) as List

----

[source, groovy]
.Solution NO-DSL
----
import groovyx.gpars.actor.DefaultActor

class Printer extends DefaultActor {
    void act() {
        loop {
            react { numbers ->
                println numbers.sum() 
            }     
        }     
    }    
}

def printer = new Printer()
printer.start()
printer << (1..4)
----

=== Solution 3.6

[source, groovy]
.Solution DSL
----
import static groovyx.gpars.actor.Actors.actor
import groovyx.gpars.dataflow.Promise

def printer = actor {
    loop {
        react { List<Integer> numbers -> 
           reply numbers.sum() 
        }     
    }    
}

Promise first = printer.sendAndPromise((1..4))
Integer second = printer.sendAndWait((4..8))
Integer third = printer.sendAndWait((8..12))

assert (first.get() + second + third) == 90
----

[source, groovy]
.Solution NO-DSL
----
import groovyx.gpars.actor.DefaultActor
import groovyx.gpars.dataflow.Promise

class Printer extends DefaultActor {
    void act() {
        loop {
            react { numbers ->
                reply numbers.sum() 
            }     
        }     
    }    
}

def printer = new Printer()
printer.start()

Promise first = printer.sendAndPromise((1..4))
Integer second = printer.sendAndWait((4..8))
Integer third = printer.sendAndWait((8..12))

assert (first.get() + second + third) == 90


----

=== Solution 4.3

[source, groovy]
.Solution DSL
----

import static groovyx.gpars.actor.Actors.messageHandler
import static java.security.MessageDigest.getInstance

import groovyx.gpars.actor.DynamicDispatchActor
import groovyx.gpars.dataflow.Promise

class Order { String content }
class NationalOrder extends Order {}
class InternationalOrder extends Order {}

final Closure<String> md5 = { String st ->
    return getInstance("MD5").digest(st.getBytes("UTF-8")).encodeHex().toString()
}

final DynamicDispatchActor orderProcessor = messageHandler {
    when { InternationalOrder international ->
        reply md5(international.content)
    }    
    when { NationalOrder national ->
        println "I'm sure the order: ${national.content} will be delivered"    
    }
}

Promise md5IdPromise = 
    orderProcessor.sendAndPromise(new InternationalOrder(content: 'supersecret'))

orderProcessor << new NationalOrder(content: 'something really silly')
orderProcessor << new NationalOrder(content: 'something as silly as the previous one')

println "I need to hold the id: ${md5IdPromise.get()}"
----

[source, groovy]
.Solution NO-DSL
----
import static groovyx.gpars.actor.Actors.messageHandler
import static java.security.MessageDigest.getInstance

import groovyx.gpars.actor.DynamicDispatchActor
import groovyx.gpars.dataflow.Promise

class Order { String content }
class NationalOrder extends Order {}
class InternationalOrder extends Order {}

class OrderProcessor extends DynamicDispatchActor {
    String md5(String st) {
        return getInstance("MD5").digest(st.getBytes("UTF-8")).encodeHex().toString()
    }
    void onMessage(InternationalOrder international) {
        reply md5(international.content)
    }    
    void onMessage(NationalOrder national) {
        println "I'm sure the order: ${national.content} will be delivered"    
    }
}

final OrderProcessor orderProcessor = new OrderProcessor().start()
final Promise md5IdPromise = 
    orderProcessor.sendAndPromise(new InternationalOrder(content: 'supersecret'))

orderProcessor << new NationalOrder(content: 'something really silly')
orderProcessor << new NationalOrder(content: 'something as silly as the previous one')

println "I need to hold the id: ${md5IdPromise.get()}"

----

=== Solution 5.3

[source, groovy]
.DSL
----
@Grab('org.imgscalr:imgscalr-lib:4.2')
import static javax.imageio.ImageIO.read
import static javax.imageio.ImageIO.write
import static org.imgscalr.Scalr.resize
import static groovyx.gpars.actor.Actors.actor
import static java.io.File.createTempFile

import groovyx.gpars.actor.DefaultActor

final DefaultActor imageActor = actor {
    loop {
        react { File image ->
            def src = read(image)
            def img = resize(src, 400, 300)
            
            write(img, 'jpg', createTempFile('actors_', image.name))
            
            println "IMAGE: ${image.name} processed"
        }
    }
}

final DefaultActor textActor = actor {
    loop {
        react { File textFile ->
            def dst = createTempFile('actors_', textFile.name)
    
            // Don't do this at home :P
            dst << "Author: MYBOSS"
            dst << textFile.text

            println "TEXT: ${textFile.name} processed"
        }
    }

}

final DefaultActor dispatchingActor = actor {
    loop { 
        react { File file ->
            if (file.name.endsWith('jpg')) {
                imageActor << file
            } else if (file.name.endsWith('txt')) {
                textActor << file
            } 
        }
    }
}

new File('/somedirwithfiles/').
    listFiles().each { dispatchingActor << it }
----

Because the NO-DSL version has its own Spock Specification it has been organized in several classes.

[source, groovy]
.Actor acting as a Proxy (NO-DSL)
----
include::{sourceDir}/exercises/forwarding/images/FileProcessorActor.groovy[]
----

[source, groovy]
.Actor processing images (NO-DSL)
----
include::{sourceDir}/exercises/forwarding/images/ImageProcessorActor.groovy[]
----

[source, groovy]
.Actor processing text files (NO-DSL)
----
include::{sourceDir}/exercises/forwarding/images/TextProcessorActor.groovy[]
----

[source, groovy]
.Specification (NO-DSL)
----
include::{testDir}/exercises/forwarding/images/ImagesProcessingSpecification.groovy[]
----

I've used the *_NotificationActor_* and *_NotifiedActor_* to make tests wait until everything 
has been processed.

