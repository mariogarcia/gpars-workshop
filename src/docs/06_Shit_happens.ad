== Shit happens

If something may go wrong it will go wrong. It's a universal rule isn't it ?

=== Actor throws an exception

An actor terminates automatically when an exception that is not handled inside actor's body is thrown.

Then... What happens if an actor throws an exception ? Should we try-catch the possible exception and deal with it ? Well, general
recomendation about this is *_let-it-crash_*. If we don't add try-catch code in our actors, they will remain cleaner and will
be easier to maintain.

During the lifecycle of our actor there are some callback methods useful to use when undesirable situations such as exceptions,
interruptions, or timeouts happen.

[source, groovy]
----

/* called when the actor's thread gets interrupted. Thread interruption will result 
 * in the stopping the actor in any case  */
onInterrupt(InterruptedException ie) 

/* called when no messages are sent to the actor within the timeout specified for 
 * the currently blocking react method */
onTimeout()

/* called when an exception occurs in the actor's event handler. 
 * Actor will stop after return from this method. */
onException(Throwable th)

----

If the worst scenario happens we would like at least to terminate the actor in an ordered and controlled way.

In order to to that all actors have the *_onException(Exception)_* method. This method is a nice place to put the code we want
to execute when a not handled exception is thrown inside the actor. That way we keep logic code away from guard code.

WARNING: Remember: By default an actor stops when an exception has been thrown
within the body of the actor. 

[source, groovy]
.Handling an actor exception DSL
----
import groovyx.gpars.actor.Actors
import groovyx.gpars.actor.DefaultActor

DefaultActor buggyActor = Actors.actor {
    delegate.metaClass.onException = { 
        println "Close database connection"
        println "Release other resources"
        println "Bye"
    }
    loop {
        react { String message ->
            throw new Exception("Shit happens :P")
        }    
    }
}

buggyActor << "Something nice" 

----

[source, groovy]
.Handling an actor exception NO-DSL
----
import groovyx.gpars.actor.Actors
import groovyx.gpars.actor.DefaultActor

class BuggyActor extends DefaultActor {

    void onException(Throwable th) {
        println "Close database connection"
        println "Release other resources"
        println "Bye"
    }

    void act() {
        loop {
            react { String message ->
                throw new Exception("Shit happens :P")
            }    
        }    
    }
}

new BuggyActor().start() << "Something nice" 

----

Well it's nice we have a mecanism to make the actor stop nicely... but I don't want the actor to stop receiving messages... I want
it to continue... how do I do that ?

=== Supervisors

Supervising is a really useful feature because you could:

* Get notified of changes on other actors
* Take control over them (stopping, restarting...etc)

Although GPars doesn't have that functionality out-of-the-box yet, I'll try to implement a very simple example on how
supervisors may look like using GPars.

The example is a supervised actor which throws an unhandled exception and informs to its supervisor in order to be able
to do something about it. 

First thing is to implement the skeleton of what a supervised actor may look like.

[source,groovy]
.Supervised Actor
----

import groovyx.gpars.actor.Actors
import groovyx.gpars.actor.DefaultActor

class SupervisedExceptionMessage { // <1>
   String message 
}

class Supervised extends DefaultActor { 
    Supervisor supervisor  // <2> 
    void onException(Throwable th) {
        supervisor << new SupervisedExceptionMessage(message: th.message) // <3>
    }
}

----

<1> When supervised actor crashes it will create an exception message to send it to its supervisor
<2> We need to hold a supervisor's reference in order to be able to inform it whenever may come
<3> Everytime an actor throws an unhandled exception the onException(Throwable) is invoked. Once the onException() method ends
the actor stops.  Before that we want to inform the supervisor in case it wanted to do something about it.

[source,groovy]
.Supervisor Actor
----
import groovyx.gpars.actor.DynamicDispatchActor

class Supervisor extends DynamicDispatchActor { // <1>
    Supervised supervised // <2>
    Class<? extends Supervised> supervisedClass // <3>

    void link(Supervised supervised) { // <4>
        this.supervised = supervised
        this.supervised.supervisor = this
        this.supervisedClass = supervised.getClass()
    }
}
----

The supervisor instance can be related to the supervised actor thanks to the supervisor's link method. This method makes actors
available to each other meaning supervisor can receive supervised's SupervisedExceptionMessage among other things.

<1> A Supervisor extends DynamicDispatchActor. It could receive many other type of messages other than SupervisedExceptionMessage.
<2> A reference to the supervised actor
<3> The reference to the supervised actor's class. This is useful in case the supervisor wanted to create a new instance of a supervised
actor that stopped because of an unhandled exception.
<4> In order to link (I took this term from Scala Akka) supervised instance to this supervisor we invoke supervisor's link method passing
the supervised actor as parameter.

Lets see how to use it.

[source,groovy]
.Supervising Example
----
class SimpleSupervisedActor extends Supervised {
    void act() {
        loop {
            react { String message ->
                if (message == 'gift') {
                    throw new Exception(message)
                }
                println "NORMAL: $message"
            }
        }
    }
}

def supervised = new SimpleSupervisedActor().start()
def supervisor = new Supervisor() {
    void onMessage(String query) {
        supervised << query
    }
    void onMessage(SupervisedException ex) {
        println "SUPERVISED ACTOR DIES WITH MESSAGE: ${ex.message}"
        supervised = supervisedClass.newInstance().start() <1>
    }
}.start()

supervisor.link(supervised)

supervisor << "something"
Thread.sleep(1000)
supervisor << "something"
Thread.sleep(1000)
supervisor << "gift"
Thread.sleep(1000)
supervisor << "Message processed by a new supervised instance 1"
Thread.sleep(1000)
supervisor << "Message processed by a new supervised instance 2"
----

This time we have two actors. We've got a Supervised actor receiving messages through its Supervisor. This way in case the
supervised actor stops, its Supervisor could still create another Supervised actor of the same type and keep processing messages transparently
to the client.

<1> The interesting part. Supervisor receives a Supervised's SupervisedException message when it's about to stop. Then the Supervisor instance
has chosen to create another Supervised instance to keep processing messages the same way. 

Enough to say, the more stateless is the Supervised actor the less difficult will be to 'restart' the Supervised actor again

=== What 'restart' means ?
