== Shit happens

If something may go wrong it will go wrong. It's a universal rule isn't it ?

=== Actor throws an exception

An actor terminates automatically when an exception that is not handled inside actor's body is thrown.

Then... What happens if an actor throws an exception ? Should we try-catch the possible exception and deal with it ? Well, general
recomendation about this is *_let-it-crash_*. If we don't add try-catch code in our actors, they will remain cleaner and will
be easier to maintain.

During the lifecycle of our actor there are some callback methods useful to use when undesirable situations such as exceptions,
interruptions, or timeouts happen.

[source, groovy]
----

/* called when the actor's thread gets interrupted. Thread interruption will result 
 * in the stopping the actor in any case  */
onInterrupt(InterruptedException ie) 

/* called when no messages are sent to the actor within the timeout specified for 
 * the currently blocking react method */
onTimeout()

/* called when an exception occurs in the actor's event handler. 
 * Actor will stop after return from this method. */
onException(Throwable th)

----

If the worst scenario happens we would like at least to terminate the actor in an ordered and controlled way.

In order to to that all actors have the *_onException(Exception)_* method. This method is a nice place to put the code we want
to execute when a not handled exception is thrown inside the actor. That way we keep logic code away from guard code.

WARNING: Remember: By default an actor stops when an exception has been thrown
within the body of the actor. 

[source, groovy]
.Handling an actor exception DSL
----
import groovyx.gpars.actor.Actors
import groovyx.gpars.actor.DefaultActor

DefaultActor buggyActor = Actors.actor {
    delegate.metaClass.onException = { 
        println "Close database connection"
        println "Release other resources"
        println "Bye"
    }
    loop {
        react { String message ->
            throw new Exception("Shit happens :P")
        }    
    }
}

buggyActor << "Something nice" 

----

[source, groovy]
.Handling an actor exception NO-DSL
----
import groovyx.gpars.actor.Actors
import groovyx.gpars.actor.DefaultActor

class BuggyActor extends DefaultActor {

    void onException(Throwable th) {
        println "Close database connection"
        println "Release other resources"
        println "Bye"
    }

    void act() {
        loop {
            react { String message ->
                throw new Exception("Shit happens :P")
            }    
        }    
    }
}

new BuggyActor().start() << "Something nice" 

----

Well it's nice we have a mecanism to make the actor stop nicely... but I don't want the actor to stop receiving messages... I want
it to continue... how do I do that ?

=== Supervisors

Supervising is a really useful feature because you could:

* Get notified of changes on other actors
* Take control over them (stopping, restarting...etc)

Although GPars doesn't have that functionality out-of-the-box yet, I'll try to implement a possible draft on how
supervisors may look like using GPars.




