== Make Actors socialize

So far we have been sending messages to an actor, receiving messages as an actor, and even replying as an actor but there's one important part
missing here... I want actors to talk to each other. Lets see how to do it.

=== Joining actors

If actors behavior depends on each other, we better make sure no one ends before it should. That's why we use the join method.

[,GPars official documentation]
""
Actors provide a join() method to allow callers to wait for the actor to terminate. A variant accepting a timeout is also available
""

[source,groovy]
.Joining DSL
----
import static groovyx.gpars.actor.Actors.actor

final receiver = actor {
    react { msg ->
        reply "Replying actor received: '$msg'"
    } 
}

final sender = actor {
    receiver << "Sent Ping" 
    react { msg ->
        println msg
    }
}

[receiver, sender]*.join()

----

[source,groovy]
.Joining NO-DSL
----
import static groovyx.gpars.actor.Actors.actor
import groovyx.gpars.actor.DefaultActor

class SendingActor extends DefaultActor {
    final DefaultActor destination
    SendingActor(DefaultActor destination) {
       this.destination = destination 
    }
    void act() {
        println destination.sendAndWait("Sent Ping")    
    }
}

class ReplyingActor extends DefaultActor {
    void act() {
        react { String msg ->
            reply "ReplyingActor received: $msg'"     
        }    
    } 
}

final receiver = new ReplyingActor().start()
final sender = new SendingActor(receiver).start()

[receiver, sender]*.join()

----

=== Forwarding

Suppose you want to send a message to a given actor and then get the response back to send it to another actor. Well good news is that you can set where the response should be sent.

[source,groovy]
.Simple forwarding NO-DSL
----
import groovyx.gpars.actor.DefaultActor

class WithId extends DefaultActor { 
    String id 
    String toString() { return this.id }
}

class Bank extends WithId {
    void act() {
        loop {
            react { Integer amount ->
                reply "Amount $amount has been stored in -- ${sender} --"     
            }     
        }
    }
}
class BankBranch extends WithId {
    void act() {
        loop {
            react { String message ->
                println message 
            }     
        }     
    }    
}

final branch1 = new BankBranch(id: '0001').start()
final branch2 = new BankBranch(id: '0002').start()
final bank = new Bank(id: 'SuperRichBank').start()

bank.send(1000, branch1)
bank.send(2000, branch2)

println bank.sendAndWait(3000)

[bank, branch1, branch2].join()

----

=== Exercise

Your boss need you to do some optimization on some files of the corporate site.

* All text files should be timestamped
* All images should be resized to a certain dimension

You have to create

* 1 Dispatching actor, so every time a file is received you must
send it to the correspondent actor to be processed.
* 1 Text processing actor
* 1 Image processing actor

Every time you send the path of a file the dispatching actor should forwad that
file to the correspondent processing actor.

TIP: Although not necessary you can use the Java7 WatchService to look for changes
in a given directory instead of keeping informed your actors.

NODE: Follow up I leave a snippet to resize an image with the library https://github.com/thebuzzmedia/imgscalr[imgscalr]

[source, groovy]
----
@Grab('org.imgscalr:imgscalr-lib:4.2')
import java.awt.image.BufferedImage
import javax.imageio.ImageIO

import org.imgscalr.Scalr

BufferedImage src = ImageIO.read(new File('//source'))
BufferedImage img = Scalr.resize(src, 300, 200)

ImageIO.write(img, 'jpg', new File('//destination'))
----

